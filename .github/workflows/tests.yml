name: Test & Publish

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  current_python: '3.9'
jobs:
  check:
    name: ${{ matrix.env.TOXENV }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu]
        env:
          - TOXENV: check
          - TOXENV: check-docs
          - TOXENV: build-docs
    env: ${{ matrix.env}}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt

    - name: Cache docs references cache
      if: env.TOXENV == 'build-docs'
      uses: actions/cache@v2
      with:
        path: doc/_build/rinoh/rinohtype.rtc
        key: ${{ env.TOXENV }}-references-${{ hashFiles('doc/_build/rinoh/rinohtype.rtc') }}
        restore-keys: |
          ${{ env.TOXENV }}-references-

    - name: Run tox
      run: tox -v -e ${{ env.TOXENV }}

    - name: Determine directory to publish docs to
      id: docs-publish-dir
      if: env.TOXENV == 'build-docs'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os, re
          github_ref = os.environ.get('GITHUB_REF')
          m = re.match(r'^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+(-dev\.[0-9]+)?)$',
                       github_ref)
          if m:
              target = m.group(1)
          elif github_ref == 'refs/heads/master':
              target = 'master'
          else:
              target = ''
          set_output('target', target)
    - name: Publish docs to GitHub pages
      if: env.TOXENV == 'build-docs' && steps.docs-publish-dir.outputs.target != ''
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: doc/_build/html
        destination_dir: ${{ steps.docs-publish-dir.outputs.target }}
        keep_files: false

  unit:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} unit tests
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10.0-alpha - 3.10, pypy-3.6, pypy-3.7]
    runs-on: ${{ matrix.os }}-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt
    - name: Install Python ${{ matrix.python-version }}
      if: matrix.python-version != env.current_python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set TOXPY for Python ${{ matrix.python-version }}
      run: python .github/workflows/toxpy.py "${{ matrix.python-version }}"

    - name: Create wheel
      run: poetry build --format wheel
    - name: Find path to wheel
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os, pathlib
          wheel_path = str(next(pathlib.Path('dist').glob('*.whl')))
          set_env('INSTALLPKG', f'--installpkg {wheel_path}')
    - name: Run tox (sdist)
      continue-on-error: ${{ startsWith(matrix.python-version, 'pypy') }}
                        # https://github.com/pytest-dev/pytest-xdist/issues/622
      env:
        WITH_COVERAGE: 1
      run: tox -v -re unit-${{ env.TOXPY }}-gh -- -s
    - name: Run tox (wheel)
      if: ${{ success() || failure() }}   # also run when sdist run fails
      continue-on-error: ${{ startsWith(matrix.python-version, 'pypy') }}
      env:
        WITH_COVERAGE: 0
      run: tox -v -re unit-${{ env.TOXPY }}-gh ${{ env.INSTALLPKG }} -- -s

    - name: Upload coverage statistics to codecov.io
      shell: bash
      run: |
        bash <(curl -s https://codecov.io/bash) -f coverage.xml -F unittests,${{ matrix.python-version }},${{ runner.os }}

  regression:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} regression tests (${{ matrix.dist }})
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.9]
        dist: [wheel]
        include:
          - { os: Ubuntu, dist: wheel, python-version: 3.6 }
          - { os: Ubuntu, dist: wheel, python-version: 3.7 }
          - { os: Ubuntu, dist: wheel, python-version: 3.8 }
          - { os: Ubuntu, dist: wheel, python-version: pypy-3.6 }
          - { os: Ubuntu, dist: wheel, python-version: pypy-3.7 }
          - { os: Ubuntu, dist: sdist, python-version: 3.9 }
    runs-on: ${{ matrix.os }}-latest
    env:
      DIST: ${{ matrix.dist }}
      WITH_COVERAGE: 1
      MUPDF_VERSION: 1.18.0
      IMAGEMAGICK_VERSION: 7.0.10.29
    steps:
    - uses: actions/checkout@v2
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt
    - name: Install Python ${{ matrix.python-version }}
      if: matrix.python-version != env.current_python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set TOXPY for Python ${{ matrix.python-version }}
      run: python .github/workflows/toxpy.py "${{ matrix.python-version }}"

    - name: Get Homebrew cache dir (macOS)
      id: cache-dirs-macos
      if: startsWith(runner.os, 'macOS')
      run: |
        echo "::set-output name=dir::$(brew --cache)"
    - name: Delete Homebrew cache dir to minimize cache size (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        rm -vrf "$(brew --cache)"
    - name: Get Homebrew package versions (macOS)
      id: homebrew-versions
      if: startsWith(runner.os, 'macOS')
      run: |
        echo "::set-output name=mupdftools::$(brew info --json mupdf-tools | jq -r '.[0].versions.stable')"
        echo "::set-output name=imagemagick::$(brew info --json imagemagick | jq -r '.[0].versions.stable')"
    - name: Cache Homebrew downloads
      if: startsWith(runner.os, 'macOS')
      uses: actions/cache@v2
      with:
        path: ${{ steps.cache-dirs-macos.outputs.dir }}
        key: ${{ runner.os }}-homebrew-mupdftools${{ steps.homebrew-versions.outputs.mupdftools }}-im${{ steps.homebrew-versions.outputs.imagemagick }}

    - name: Get Chocolatey cache dir (Windows)
      id: cache-dirs-windows
      if: startsWith(runner.os, 'Windows')
      run: |
        echo "::set-output name=dir::$(echo $env:TEMP\chocolatey)"
    - name: Delete Chocolatey cache dir to minimize cache size (Windows)
      if: startsWith(runner.os, 'Windows')
      run: |
        Remove-Item ${{ steps.cache-dirs-windows.outputs.dir }} -Verbose -Recurse -Force -ErrorAction Continue
    - name: Cache Cholocatey downloads
      if: startsWith(runner.os, 'Windows')
      uses: actions/cache@v2
      with:
        path: ${{ steps.cache-dirs-windows.outputs.dir }}
        key: ${{ runner.os }}-chocolatey-mupdf${{ env.MUPDF_VERSION}}-im${{ env.IMAGEMAGICK_VERSION }}

    - name: Install tools required by the regression tests (Linux)
      if: startsWith(runner.os, 'Linux')
      run: |
        sudo apt-get install mupdf-tools imagemagick
    - name: Install tools required by the regression tests (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        brew install mupdf-tools imagemagick
    - name: Install tools required by the regression tests (Windows)
      if: startsWith(runner.os, 'Windows')
      run: |
        choco install mupdf --version=${{ env.MUPDF_VERSION}}
        choco install imagemagick.tool --version=${{ env.IMAGEMAGICK_VERSION }}

    - name: Create wheel
      if: env.DIST == 'wheel'
      run: poetry build --format wheel
    - name: Find path to wheel
      if: env.DIST == 'wheel'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os, pathlib
          wheel_path = str(next(pathlib.Path('dist').glob('*.whl')))
          set_env('INSTALLPKG', f'--installpkg {wheel_path}')
    - name: Run tox
      # https://github.com/pytest-dev/pytest-xdist/issues/622
      continue-on-error: ${{ runner.os == 'Linux'
                             && startsWith(matrix.python-version, 'pypy') }}
      run: tox -v -e regression-${{ env.TOXPY }}-gh ${{ env.INSTALLPKG }} -- -s

    - name: Upload coverage statistics to codecov.io
      if: env.WITH_COVERAGE == 1
      shell: bash
      run: |
        bash <(curl -s https://codecov.io/bash) -f coverage.xml -F regression,${{ matrix.python-version }},${{ runner.os }}

  check-tag:
    needs: [check, unit, regression]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Get tag
      uses: olegtarasov/get-tag@v2.1
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt
    - name: Get package version from Poetry
      run: echo "PKG_VERSION=$(poetry version --short)" >> $GITHUB_ENV
    - name: Check whether the tag matches the package version
      uses: jannekem/run-python-script-action@utilities
      with:
        script: |
          if '${{ env.GIT_TAG_NAME }}' != 'v${{ env.PKG_VERSION }}':
              error("Git tag doesn't match the package version! Aborting.")
              exit(1)

    - name: Check whether the tag matches a stable version
      id: check-stable
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os, re
          tag = os.environ.get('GIT_TAG_NAME')
          match = re.match(r'^v[0-9]+\.[0-9]+\.[0-9]+$', tag)
          output = 'true' if match else 'false'
          print(f'stable = {output}')
          set_output('stable', output)
    - name: Check whether the tag matches a development version
      id: check-develop
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os, re
          tag = os.environ.get('GIT_TAG_NAME')
          match = re.match(r'^v[0-9]+\.[0-9]+\.[0-9]+-dev\.[0-9]+$', tag)
          output = 'true' if match else 'false'
          print(f'develop = {output}')
          set_output('develop', output)
    outputs:
      stable: ${{ steps.check-stable.outputs.stable }}
      develop: ${{ steps.check-develop.outputs.develop }}

  publish-develop:
    needs: check-tag
    if: needs.check-tag.outputs.develop == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt

    - name: Build the wheel
      run: poetry build --format wheel
    - name: Publish the wheel as a prerelease on GitHub
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/rinohtype-*.whl"
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true

  publish-release:
    needs: check-tag
    if: needs.check-tag.outputs.stable == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.current_python }}
    - name: Install tox & co
      run: |
        pip${{ env.current_python }} install --requirement .github/workflows/requirements.txt

    - name: Publish to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_TOKEN }}
      run: |
        poetry publish --build --username __token__ --password "$PYPI_TOKEN"
